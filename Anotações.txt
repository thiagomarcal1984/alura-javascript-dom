Use o Console do navegador para usar o interprestador Java Script.

document.getElementById obtém  o objeto no HTML com o ID "producao":
    I=> document.getElementById("producao");
    O=> <input type=​"submit" value=​"Iniciar produção" class=​"producao" id=​"producao">​

Query Selector (document.querySelector) é uma forma de buscar um elemento da 
mesma forma como você faria ao usar um seletor CSS:

    I=> document.querySelector("#producao");
    O=> <input type=​"submit" value=​"Teste" class=​"producao" id=​"producao">​

  1. Exemplo de Query Selector (buscando O PRIMEIRO parágrafo do elemento com o id quadro):
    I=> document.querySelector("#quadro p");
    O=> <input type=​"submit" value=​"Teste" class=​"producao" id=​"producao">​

  2. Exemplo de Query Selector (buscando TUDO da classe ".estatisticas .estatistica"):
    I=> document.querySelectorAll(".estatisticas .estatistica");
    O=> NodeList(4) [div.estatistica, div.estatistica, div.estatistica, div.estatistica]
        0: div.estatistica
        1: div.estatistica
        2: div.estatistica
        3: div.estatistica
        length: 4
        [[Prototype]]: NodeList

Modificando o valor do objeto de ID "produção":
    I=> document.getElementById("producao").value="Teste";

document.getElementsByClassName obtém uma lista de elementos pelo nome da classe dos elementos:
    I=> document.getElementsByClassName("estatistica");
    O=> HTMLCollection(4) [div.estatistica, div.estatistica, div.estatistica, div.estatistica]
        0: div.estatistica
        1: div.estatistica
        2: div.estatistica
        3: div.estatistica
        length: 4
        [[Prototype]]: HTMLCollection


******************************************************************************************
    Métodos da aula: 
        document.getElementById
        document.getElementsByClassName
        document.querySelector
        document.querySelectorAll
******************************************************************************************

A palavra reservada "document" no JavaScript é a representação de todo o documento
HTML. Se você digitar "document" no console do Google Chrome, o HTML inteiro da 
página é exibido na saída. Já no Firefox é exibido um objeto do tipo HTMLDocument,
além de exibir suas propriedades (url, forms, firstChild etc.).


Métodos para selecionar elementos no HTML
    document.getElementByID(id) - Selecionar um elemento pelo ID.
    document.getElementsByTagName(name) - Selecionar um elemento pelo nome.
    document.getElementsByClassName(name) - Selecionar um elemento pelo nome da classe.

Propriedades e métodos para alterar elementos no HTML
    element.innerHTML - Esta propriedade obtém ou altera qualquer elemento no HTML, inclusive tags.
    element.innerText - Esta propriedade permite inserir textos no HTML.
    element.attribute - Esta propriedade altera o valor de um elemento HTML
    element.setAttribute(atributo, valor) - Este método altera o valor de um atributo de um elemento HTML.

Adicionando e excluindo elementos
    document.write() - Escreve no fluxo de saída do HTML.
    document.appendChild() - Adiciona um elemento HTML.
    document.removeChild() - Remove um elemento HTML.
    document.replaceChild() - Substitui um elemento HTML.
    document.createElement() - Cria um elemento HTML.

Convenções: 
    separar o JavaScript num arquivo separado (geralmente chamado js/main.js).
    carregar o arquivo após todo o carregamento do HTML (antes do fim do body).


Para que um elemento passe a ouvir um evento, precisamos usar o método 
addEventListener(nomeDoEvento, nomeDaFuncao).

O parâmetro "nome da função" não pode armazenar um código JavaScript direto 
(ex: alert, console.log etc.). É necessário fornecer uma função que vai 
responder ao evento.

    Errado: 
        robotron.addEventListener("click", alert("oi"))

    Certo: 
        robotron.addEventListener("click", dizOi)

        function dizOi() {
            console.log("Oi")
        }

Mesmo a const sendo declarada após a função, o código funciona sem problemas. 
Isso acontece devido ao comportamento de hoisting no JavaScript.
O Hoisting permite que você execute funções antes das suas declarações.
Hoisting is JavaScript's default behavior of moving declarations to the top.


A forma que declaramos const e variáveis podem alterar o resultado esperado do
nosso código. Existe um comportamento chamado “Hoisting”, ou içamento em
português, que explica os diferentes casos possíveis na linguagem JavaScript.
Entender como ele funciona nesta linguagem é essencial tanto para aprimorar a
prática de leitura de um código quanto para o desenvolvimento em si.

    https://www.alura.com.br/artigos/hoisting-no-javascript

Declaração de funções são suportadas por hoisting (trazer a declaração para 
antes da execução do código), mas o mesmo não acontece com declaração de 
variáveis (seja com var, const ou let). Ao fazer hoisting com var, o conteúdo
da variável fica "undefined"; já ao fazer hoisting com const ou let, uma
exceção é lançada, dizendo que a variável não pode ser acessada antes de 
ela ser inicializada.


Funções podem ser nomeadas/declaradas ou anônimas.

Funções anônimas são inseridas usando a sintaxe function():
    robotron.addEventListener("click", function(){ console.log("Oi")})

Outra sintaxe para funções anônimas é () => { bloco de código }:
    // Declaração do tipo Arrow Function.
    robotron.addEventListener("click", () => { console.log("Oi")})

Se você fornecer um parâmetro para uma Arrow Function, ele será do tipo 
PointerEvent. Com isso, temos mais poder sobre o que será feito com JavaScript.

Funções anônimas são usadas apenas a partir de onde foram declaradas; já as 
funções declaradas/nomeadsa podem ser reusadas a partir de qualquer elemento.

Em JavaScript, implicitamente os valores são convertidos para String. Para
converter para String, use a função parseInt().

Parametrize funções que tem comportamento repetido. Veja o exemplo da função
manipulaDados(operacao) em js/main.js.

O método const querySelectorAll é diferente do método querySelector:
    querySelector retorna apenas o primeiro elemento;
    querySelectorAll retorna uma lista de elementos.

O objeto PointerEvent tem uma propriedade target, que é onde o evento aconteceu.
O código de agora inclui as funções de somar/subtrair, mas o alvo do cálculo é
só o campo do braço. Falta contextualizar o código para cada elemento do robô.

Operações sobre arrays em JavaScript: 
https://www.alura.com.br/artigos/javascript-para-que-serve-array

Alguns métodos em arrays: 
    forEach(function(parms)) = aplica uma função para cada elemento do array.
    indexOf('elemento') = obtém a posição do elemento 'elemento'.
    push('elemento') = acrescenta 'elemento' no fim do array.
    unshift('elemento') = acrescenta 'elemento' no início do array.
    shift() = remove o primeiro elemento início do array.
    splice(posicao, numeroARemover) = remove elementos a partir de uma posição.
    
Os objetos do DOM tem o chamado parentNode, que é uma referência ao elemento 
que contém o objeto. 

Para desacoplar o JavaScript do CSS, podemos usar os chamados data attributes.
Com ele, não será necessário identificar as classes ou os conteúdos dos 
elementos do que estiver no DOM.

Os data attributes são referenciado com chaves no querySelector:
    document.querySelectorAll("[data-controle]")

Todos os elementos do DOM cujos atributos começam com "data-" fazem parte do
objeto DOMStringMap (um array associativo chamado dataset) desse elemento DOM.

Os data attributes podem ou não ter um valor atribuído:
    // O dataset chamado controle tem um dos valores que é passado como 
    // parâmetro para a função manipulaDados (+ ou -).
    elemento.addEventListener("click", (evento) => {
        manipulaDados(evento.target.dataset.controle, evento.target.parentNode)
    })

    // Aqui o dataset chamado contador serve apenas para localizar o contador
    // dentro do objeto controle.
    const peca = controle.querySelector("[data-contador]")

